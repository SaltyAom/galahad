// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  username    String      @unique @db.VarChar(32)
  password    String      @db.Char(44)
  favorites   Favorite[]
  profile     Profile?
  collection  Collection[]
}

model Favorite {
  id        Int
  created   DateTime  @default(now())
  uid       Int
  user      User      @relation(fields: [uid], references: [id])

  @@id([id, uid])
}

model Collection {
  id        Int                 @id @default(autoincrement()) @db.UnsignedInt
  uid       Int
  title     String              @db.TinyText
  detail    String              @db.TinyText
  created   DateTime            @default(now())
  updated   DateTime            @default(now())
  public    Boolean             @default(false)
  hentai    CollectionHentai[]
  user      User                @relation(fields: [uid], references: [id])
}

model CollectionHentai {
  id                  Int                 @id @default(autoincrement()) @db.UnsignedInt
  hentaiId            Int
  collectionId        Int
  collection          Collection          @relation(fields: [collectionId], references: [id])
  // ? Using Doubly Linked List for reorder sort
  nextId              Int?                @unique
  next                CollectionHentai?   @relation("link", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  previous            CollectionHentai?   @relation("link")

  @@unique([hentaiId, collectionId])
}

model Profile {
  id        Int       @id
  joined    DateTime  @default(now())
  user      User      @relation(fields: [id], references: [id])
}